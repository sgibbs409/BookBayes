


export  ApproximateValueIteration,
        solve,
        NearestNeighborValueFunction,
        fit!,
        LocallyWeightedValueFunction,
        MultilinearValueFunction,
        SimplexValueFunction,
        LinearRegressionValueFunction


"""
    struct ApproximateValueIteration
        UŒ∏ # initial parameterized value function that supports fit!
        S # set of discrete states for performing backups
        k_max # maximum number of iterations
    end
"""
struct ApproximateValueIteration
    UŒ∏ # initial parameterized value function that supports fit!
    S # set of discrete states for performing backups
    k_max # maximum number of iterations
end


"""
    function solve(M::ApproximateValueIteration, ùí´::MDP)
"""
function solve(M::ApproximateValueIteration, ùí´::MDP)
    UŒ∏, S, k_max = M.UŒ∏, M.S, M.k_max
    for k in 1:k_max
        U = [backup(ùí´, UŒ∏, s) for s in S]
        fit!(UŒ∏, S, U)
    end

    return ValueFunctionPolicy(ùí´, UŒ∏)
end


"""
    mutable struct NearestNeighborValueFunction
        k # number of neighbors
        d # distance function d(s, s‚Ä≤)
        S # set of discrete states
        Œ∏ # vector of values at states in S
    end
"""
mutable struct NearestNeighborValueFunction
    k # number of neighbors
    d # distance function d(s, s‚Ä≤)
    S # set of discrete states
    Œ∏ # vector of values at states in S
end

"""
    function (UŒ∏::NearestNeighborValueFunction)(s)

Approximate value function at s as average of value function over k nearest states (whose value function value is already known).
"""
function (UŒ∏::NearestNeighborValueFunction)(s)
    # distances from s to each state s‚Ä≤ in state subset S
    dists = [UŒ∏.d(s,s‚Ä≤) for s‚Ä≤ in UŒ∏.S]
    # indicies of shortest 1:k distances (ind[1] == index of closest neighbor)
    ind = sortperm(dists)[1:UŒ∏.k]
    # average value of k nearest neighbors
    return mean(UŒ∏.Œ∏[i] for i in ind)
end

"""
    function fit!(UŒ∏::NearestNeighborValueFunction, S, U)
"""
function fit!(UŒ∏::NearestNeighborValueFunction, S, U)
    UŒ∏.Œ∏ = U
    return UŒ∏
end


"""
    mutable struct LocallyWeightedValueFunction
        k # kernel function k(s, s‚Ä≤)
        S # set of discrete states
        Œ∏ # vector of values at states in S
    end
"""
mutable struct LocallyWeightedValueFunction
    k # kernel function k(s, s‚Ä≤)
    S # set of discrete states
    Œ∏ # vector of values at states in S
end

"""
    function (UŒ∏::LocallyWeightedValueFunction)(s)
"""
function (UŒ∏::LocallyWeightedValueFunction)(s)
    w = normalize([UŒ∏.k(s,s‚Ä≤) for s‚Ä≤ in UŒ∏.S], 1)
    return UŒ∏.Œ∏ ‚ãÖ w
end

"""
    function fit!(UŒ∏::LocallyWeightedValueFunction, S, U)
"""
function fit!(UŒ∏::LocallyWeightedValueFunction, S, U)
    UŒ∏.Œ∏ = U
    return UŒ∏
end



# ------------------ MultilinearValueFunction ---------------------

# Also implemented in Interpolations.jl

"""
    mutable struct MultilinearValueFunction
        o # position of lower-left corner
        Œ¥ # vector of widths
        Œ∏ # vector of values at states in S
    end
"""
mutable struct MultilinearValueFunction
    o # position of lower-left corner
    Œ¥ # vector of widths
    Œ∏ # vector of values at states in S
end

"""
    function (UŒ∏::MultilinearValueFunction)(s)

Use multilinear interpolation to estimate the value of state vector `s` for known state values `Œ∏` over a grid defined by lower-left vertex `o` and vector of widths `Œ¥`.  Verticies of the grid can all be written as `o + Œ¥.*i` for some non-negative integer vector `i`.
"""
function (UŒ∏::MultilinearValueFunction)(s)
    o, Œ¥, Œ∏ = UŒ∏.o, UŒ∏.Œ¥, UŒ∏.Œ∏
    Œî = (s - o)./Œ¥
    # Multidimensional index of lower-left cell
    i = min.(floor.(Int, Œî) .+ 1, size(Œ∏) .- 1)
    vertex_index = similar(i)
    d = length(s)
    u = 0.0
    for vertex in 0:2^d-1
        weight = 1.0
        for j in 1:d
            # Check whether jth bit is set
            if vertex & (1 << (j-1)) > 0
                vertex_index[j] = i[j] + 1
                weight *= Œî[j] - i[j] + 1
            else
                weight *= i[j] - Œî[j]
            end
        end
        u += Œ∏[vertex_index...]*weight
    end

    return u
end


"""
    function fit!(UŒ∏::MultilinearValueFunction, S, U)
"""
function fit!(UŒ∏::MultilinearValueFunction, S, U)
    UŒ∏.Œ∏ = U
    return UŒ∏
end


# --------------- SimplexValueFunction ------------------
#
# Also implemented in GridInterpolations.jl

"""
    mutable struct SimplexValueFunction
        o # position of lower-left corner
        Œ¥ # vector of widths
        Œ∏ # vector of values at states in S
    end
"""
mutable struct SimplexValueFunction
    o # position of lower-left corner
    Œ¥ # vector of widths
    Œ∏ # vector of values at states in S
end

"""
    function (UŒ∏::SimplexValueFunction)(s)

Estimate value of state vector `s` for known values `Œ∏` over a grid defined by a lower-left vertex `o` and vector of widths `Œ¥`.  Vertices of the grid can all be written `o + Œ¥.*i` for some non-negative integral vector `i`.
"""
function (UŒ∏::SimplexValueFunction)(s)
    Œî = (s - UŒ∏.o)./UŒ∏.Œ¥
    # Multidimensional index of upper-right cell
    i = min.(floor.(Int, Œî) .+ 1, size(UŒ∏.Œ∏) .- 1) .+ 1
    u = 0.0
    s‚Ä≤ = (s - (UŒ∏.o + UŒ∏.Œ¥.*(i.-2))) ./ UŒ∏.Œ¥
    p = sortperm(s‚Ä≤) # increasing order
    w_tot = 0.0
    for j in p
        w = s‚Ä≤[j] - w_tot
        u += w*UŒ∏.Œ∏[i...]
        i[j] -= 1
        w_tot += w
    end

    u += (1 - w_tot)*UŒ∏.Œ∏[i...]
    return u
end


"""
    function fit!(UŒ∏::SimplexValueFunction, S, U)
"""
function fit!(UŒ∏::SimplexValueFunction, S, U)
    UŒ∏.Œ∏ = U
    return UŒ∏
end


# -------------- Linear Regression Value Function ---------------



"""
    mutable struct LinearRegressionValueFunction
        Œ≤ # basis vector function
        Œ∏ # vector of paramters
    end
"""
mutable struct LinearRegressionValueFunction
    Œ≤ # basis vector function
    Œ∏ # vector of paramters
end


"""
    function (UŒ∏::LinearRegressionValueFunction)(s)
"""
function (UŒ∏::LinearRegressionValueFunction)(s)
    return UŒ∏.Œ≤(s) ‚ãÖ UŒ∏.Œ∏
end

"""
    function fit!(UŒ∏::LinearRegressionValueFunction, S, U)
"""
function fit!(UŒ∏::LinearRegressionValueFunction, S, U)
    X = hcat([UŒ∏.Œ≤(s) for s in S]...)'
    UŒ∏.Œ∏ = pinv(X)*U
    return UŒ∏
end
