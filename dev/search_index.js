var documenterSearchIndex = {"docs":
[{"location":"anotherPage/#The-BookBayes-Module","page":"Another page","title":"The BookBayes Module","text":"","category":"section"},{"location":"anotherPage/","page":"Another page","title":"Another page","text":"BookBayes","category":"page"},{"location":"anotherPage/#BookBayes","page":"Another page","title":"BookBayes","text":"module BookBayes\n\nLibrary of functions given in Algorithms for Decision Making\n\n\n\n\n\n","category":"module"},{"location":"anotherPage/#Module-Index","page":"Another page","title":"Module Index","text":"","category":"section"},{"location":"anotherPage/","page":"Another page","title":"Another page","text":"Modules = [BookBayes]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"anotherPage/#Detailed-API","page":"Another page","title":"Detailed API","text":"","category":"section"},{"location":"anotherPage/","page":"Another page","title":"Another page","text":"Modules = [BookBayes]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"anotherPage/#BookBayes.ApproximateValueIteration","page":"Another page","title":"BookBayes.ApproximateValueIteration","text":"struct ApproximateValueIteration\n    UŒ∏ # initial parameterized value function that supports fit!\n    S # set of discrete states for performing backups\n    k_max # maximum number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.BayesianNetwork","page":"Another page","title":"BookBayes.BayesianNetwork","text":"struct BayesianNetwork\n\nRepresents a Bayesian Network.\n\nFields:\n\nvars::Vector{Variable}:\n\nVector of Variables contained in network\n\nfactors::Vector{Factor}:\n\nVector of Factors, one for each Variable in vars, representing conditional probability distribution over that variable given parents of var in network.\n\ngraph::SimpleDiGraph{Int64}:\n\nRepresents the structure of the network variables and implicitly defines independence relationships.\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.BranchAndBound","page":"Another page","title":"BookBayes.BranchAndBound","text":"struct BranchAndBound\n    ùí´ # problem\n    d # depth\n    Ulo # lower bound on value function at depth d Qhi # upper bound on action value function\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.CrossEntropyPolicySearch","page":"Another page","title":"BookBayes.CrossEntropyPolicySearch","text":"struct CrossEntropyPolicySearch\n    p # initial distribution\n    m # number of samples\n    m_elite # number of elite samples\n    k_max # number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.DAG","page":"Another page","title":"BookBayes.DAG","text":"const DAG = SimpleDiGraph\n\nData structure representing a directed acyclic graph\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.DirectSampling","page":"Another page","title":"BookBayes.DirectSampling","text":"struct DirectSampling\n    m # number of samples\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.EvolutionStrategies","page":"Another page","title":"BookBayes.EvolutionStrategies","text":"struct EvolutionStrategies\n    D # distribution constructor\n    œà # initial distribution parameterization\n    ‚àálogp # log search likelihood gradient\n    m # number of samples\n    Œ± # step factor\n    k_max # number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.ExactInference","page":"Another page","title":"BookBayes.ExactInference","text":"struct ExactInference\n\nSingleton type to pass instances of as first arg of infer to trigger direct inference method.\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.Factor","page":"Another page","title":"BookBayes.Factor","text":"struct Factor\n\nA Type representing a joint or conditional probability distribution over the variables in vars.\n\nFields:\n\nvars:\n\nThe variables represented by this distribution\n\ntable:\n\nProbability table mapping Variable assignments (NamedTuple) => probability (Float64)\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.FactorTable","page":"Another page","title":"BookBayes.FactorTable","text":"const FactorTable = Dict{NamedTuple,Float64}\n\nType alias of a Dictionary mapping tuples of Variable name=>value assignments to probabilities.\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.ForwardSearch","page":"Another page","title":"BookBayes.ForwardSearch","text":"struct ForwardSearch\n    ùí´ # problem\n    d # depth\n    U # value function at depth d\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.GaussSeidelValueIteration","page":"Another page","title":"BookBayes.GaussSeidelValueIteration","text":"struct GaussSeidelValueIteration\n    k_max # maximum number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.GeneticPolicySearch","page":"Another page","title":"BookBayes.GeneticPolicySearch","text":"struct GeneticPolicySearch\n    Œ∏s # initial population\n    œÉ # initial standard devidation\n    m_elite # number of elite samples\n    k_max # number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.GibbsSampling","page":"Another page","title":"BookBayes.GibbsSampling","text":"struct GibbsSampling\n    m_samples # number of samples to use\n    m_burnin # number of samples to discard during burn-in\n    m_skip # number of samples to skip for thinning\n    ordering # array of variable indices\nend\n\nData structure specifying parameters to use when Gibbs Sampling a BayesianNetwork\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.HeuristicSearch","page":"Another page","title":"BookBayes.HeuristicSearch","text":"struct HeuristicSearch\n    ùí´ # problem\n    Uhi # upper bound on value function\n    d # depth\n    m # number of simulations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.HeuristicSearch-Tuple{Any}","page":"Another page","title":"BookBayes.HeuristicSearch","text":"function (œÄ::HeuristicSearch)(s)\n\nGuranteed to converge to optimal value function iff Uhi is indeed an upperbound on U.\n\nComplexity: ùí™(m √ó d √ó |ùíÆ|√ó|ùíú|)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.HookeJeevesPolicySearch","page":"Another page","title":"BookBayes.HookeJeevesPolicySearch","text":"struct HookeJeevesPolicySearch\n    Œ∏ # initial parameterization\n    Œ± # step size\n    c # step size reduction factor\n    Œµ # termination step size\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.IsotropicEvolutionStrategies","page":"Another page","title":"BookBayes.IsotropicEvolutionStrategies","text":"struct IsotropicEvolutionStrategies\n    œà # initial mean\n    œÉ # initial standard devidation\n    m # number of samples\n    Œ± # step factor\n    k_max # number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.K2Search","page":"Another page","title":"BookBayes.K2Search","text":"struct K2Search\n    ordering::Vector{Int} # variable ordering\nend\n\nData structure with parameters to inform acyclic directed graph fitting following K2 Search algorithm.\n\nFields\n\n* ordering::Vector{Int}\n    Enforces a topological sort on the potential graph search space.\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LabeledHeuristicSearch","page":"Another page","title":"BookBayes.LabeledHeuristicSearch","text":"struct LabeledHeuristicSearch\n    ùí´ # problem\n    Uhi # upper bound on value function\n    d # depth\n    Œ¥ # gap threshold\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LabeledHeuristicSearch-Tuple{Any}","page":"Another page","title":"BookBayes.LabeledHeuristicSearch","text":"function (œÄ::LabeledHeuristicSearch)(s)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.LikelihoodWeightedSampling","page":"Another page","title":"BookBayes.LikelihoodWeightedSampling","text":"struct LikelihoodWeightedSampling\n    m # number of samples\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LinearProgramFormulation","page":"Another page","title":"BookBayes.LinearProgramFormulation","text":"struct LinearProgramFormulation end\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LinearQuadraticProblem","page":"Another page","title":"BookBayes.LinearQuadraticProblem","text":"struct LinearQuadraticProblem\n    Ts # transition matrix with respect to state\n    Ta # transition matrix with respect to action\n    Rs # reward matrix with respect to state (negative semidefinite)\n    Ra # reward matrix with respect to action (negative definite)\n    h_max # horizon\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LinearRegressionValueFunction","page":"Another page","title":"BookBayes.LinearRegressionValueFunction","text":"mutable struct LinearRegressionValueFunction\n    Œ≤ # basis vector function\n    Œ∏ # vector of paramters\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LinearRegressionValueFunction-Tuple{Any}","page":"Another page","title":"BookBayes.LinearRegressionValueFunction","text":"function (UŒ∏::LinearRegressionValueFunction)(s)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.LocalDirectedGraphSearch","page":"Another page","title":"BookBayes.LocalDirectedGraphSearch","text":"struct LocalDirectedGraphSearch\n    G::DAG          # initial graph\n    k_max::Integer  # number of iterations\nend\n\nData structure with parameters to inform graph fit operation.\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LocallyWeightedValueFunction","page":"Another page","title":"BookBayes.LocallyWeightedValueFunction","text":"mutable struct LocallyWeightedValueFunction\n    k # kernel function k(s, s‚Ä≤)\n    S # set of discrete states\n    Œ∏ # vector of values at states in S\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.LocallyWeightedValueFunction-Tuple{Any}","page":"Another page","title":"BookBayes.LocallyWeightedValueFunction","text":"function (UŒ∏::LocallyWeightedValueFunction)(s)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.MDP","page":"Another page","title":"BookBayes.MDP","text":"struct MDP\n    Œ≥ # discount factor\n    ùíÆ # state space\n    ùíú # action space\n    T # transition function\n    R # reward function\n    TR # sample transition and reward\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.MonteCarloPolicyEvaluation","page":"Another page","title":"BookBayes.MonteCarloPolicyEvaluation","text":"struct MonteCarloPolicyEvaluation\n    ùí´ # problem\n    b # initial state distribution\n    d # depth\n    m # number of samples\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.MonteCarloPolicyEvaluation-Tuple{Any,Any}","page":"Another page","title":"BookBayes.MonteCarloPolicyEvaluation","text":"(U::MonteCarloPolicyEvaluation)(œÄ, Œ∏) = U(s->œÄ(Œ∏, s))\n\nParameterized version where policy adjusted by parameter vector Œ∏.\n\nReturns: UÃÉ(œÄ‚ÇçŒ∏‚Çé)\n\nComplexity: ùí™(m √ó d)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.MonteCarloPolicyEvaluation-Tuple{Any}","page":"Another page","title":"BookBayes.MonteCarloPolicyEvaluation","text":"function (U::MonteCarloPolicyEvaluation)(œÄ)\n\nReturn the mean discounted reward of m random trajectories, each calculated by first sampling the initial state distribution, and then executing rollout from that state, using policy œÄ.\n\nU(pi) = E_tauR(tau) = sum_tau p(tau)R(tau) approx frac1m sum_i=1^m R(tau^(i))\n\nReturns: UÃÉ(œÄ)\n\nComplexity: ùí™(m √ó d)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.MonteCarloTreeSearch","page":"Another page","title":"BookBayes.MonteCarloTreeSearch","text":"struct MonteCarloTreeSearch\n    ùí´ # problem\n    N # visit counts\n    Q # action value estimates\n    d # depth\n    m # number of simulations\n    c # exploration constant\n    œÄ # rollout policy\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.MonteCarloTreeSearch-Tuple{Any}","page":"Another page","title":"BookBayes.MonteCarloTreeSearch","text":"function (œÄ::MonteCarloTreeSearch)(s)\n\nEstimate optimal next action by first simulating m random trajectories.  Each simulation improves estimated action-value function.  The returned action is the optimal action over the estimated action-value function from the given state s.\n\nComplexity: ùí™(|ùíú| √ó d √ó m)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.MultilinearValueFunction","page":"Another page","title":"BookBayes.MultilinearValueFunction","text":"mutable struct MultilinearValueFunction\n    o # position of lower-left corner\n    Œ¥ # vector of widths\n    Œ∏ # vector of values at states in S\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.MultilinearValueFunction-Tuple{Any}","page":"Another page","title":"BookBayes.MultilinearValueFunction","text":"function (UŒ∏::MultilinearValueFunction)(s)\n\nUse multilinear interpolation to estimate the value of state vector s for known state values Œ∏ over a grid defined by lower-left vertex o and vector of widths Œ¥.  Verticies of the grid can all be written as o + Œ¥.*i for some non-negative integer vector i.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.NearestNeighborValueFunction","page":"Another page","title":"BookBayes.NearestNeighborValueFunction","text":"mutable struct NearestNeighborValueFunction\n    k # number of neighbors\n    d # distance function d(s, s‚Ä≤)\n    S # set of discrete states\n    Œ∏ # vector of values at states in S\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.NearestNeighborValueFunction-Tuple{Any}","page":"Another page","title":"BookBayes.NearestNeighborValueFunction","text":"function (UŒ∏::NearestNeighborValueFunction)(s)\n\nApproximate value function at s as average of value function over k nearest states (whose value function value is already known).\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.PolicyIteration","page":"Another page","title":"BookBayes.PolicyIteration","text":"struct PolicyIteration\n    œÄ # initial policy\n    k_max # maximum number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.RolloutLookahead","page":"Another page","title":"BookBayes.RolloutLookahead","text":"struct RolloutLookahead\n    ùí´ # problem\n    œÄ # rollout policy\n    d # depth\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.RolloutLookahead-Tuple{Any}","page":"Another page","title":"BookBayes.RolloutLookahead","text":"function (œÄ::RolloutLookahead)(s)\n\nPolicy function: similar to ValueFunctionPolicy but using a single call to rollout for value function.\n\nComplexity: O(|ùíú|√ó|ùíÆ| √ó d)\n\nConsider variation that uses average of m rollouts to calculate U(s) (vs just 1 with this version).\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.SimpleProblem","page":"Another page","title":"BookBayes.SimpleProblem","text":"struct SimpleProblem\n    bn::BayesianNetwork\n    chance_vars::Vector{Variable}\n    decision_vars::Vector{Variable}\n    utility_vars::Vector{Variable}\n    utilities::Dict{Symbol, Vector{Float64}}\nend\n\nData structure representing a decision network.\n\nFields\n\nbn::BayesianNetwork\n\nchance_vars::Vector{Variable}\n\ndecision_vars::Vector{Variable}\n\nutility_vars::Vector{Variable}\n\nutilities::Dict{Symbol, Vector{Float64}}\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.SimplexValueFunction","page":"Another page","title":"BookBayes.SimplexValueFunction","text":"mutable struct SimplexValueFunction\n    o # position of lower-left corner\n    Œ¥ # vector of widths\n    Œ∏ # vector of values at states in S\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.SimplexValueFunction-Tuple{Any}","page":"Another page","title":"BookBayes.SimplexValueFunction","text":"function (UŒ∏::SimplexValueFunction)(s)\n\nEstimate value of state vector s for known values Œ∏ over a grid defined by a lower-left vertex o and vector of widths Œ¥.  Vertices of the grid can all be written o + Œ¥.*i for some non-negative integral vector i.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.SparseSampling","page":"Another page","title":"BookBayes.SparseSampling","text":"struct SparseSampling\n    ùí´ # problem\n    d # depth\n    m # number of samples\n    U # value function at depth d\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.ValueFunctionPolicy","page":"Another page","title":"BookBayes.ValueFunctionPolicy","text":"struct ValueFunctionPolicy\n    ùí´ # problem\n    U # utility function\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.ValueFunctionPolicy-Tuple{Any}","page":"Another page","title":"BookBayes.ValueFunctionPolicy","text":"function (œÄ::ValueFunctionPolicy)(s)\n\nGreedy policy function mapping states to greedy action.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.ValueIteration","page":"Another page","title":"BookBayes.ValueIteration","text":"struct ValueIteration\n    k_max # maximum number of iterations\nend\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.Variable","page":"Another page","title":"BookBayes.Variable","text":"struct Variable\n\nA Type representing a single discrete variable.\n\nParams:\n\nname::Symbol\n\nname of Variable\n\nm::Int:\n\nnumber of possible (discrete) values this Variable can take\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#BookBayes.VariableElimination","page":"Another page","title":"BookBayes.VariableElimination","text":"struct VariableElimination\n\nSingleton type to pass instances of as first arg of infer to trigger variable elimination method.\n\nordering\n\nIterable over variable indices indicating the order over the factors to use.\n\n\n\n\n\n","category":"type"},{"location":"anotherPage/#Base.:*-Tuple{Factor,Factor}","page":"Another page","title":"Base.:*","text":"function Base.:*(œï::Factor, œà::Factor)\n\nMultiply two (joint and conditional) Factors to form a new (joint) Factor.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#Base.rand-Tuple{BayesianNetwork}","page":"Another page","title":"Base.rand","text":"function Base.rand(bn::BayesianNetwork)\n\nDirect sample from a joint distribution given by bn.\n\nReturns: NamedTuple of Variable name => value pairs sampled from bn.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#Base.rand-Tuple{Factor}","page":"Another page","title":"Base.rand","text":"function Base.rand(œÜ::Factor)\n\nDirect sample a discrete Factor  given by œÜ\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.are_markov_equivalent-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph,LightGraphs.SimpleGraphs.SimpleDiGraph}","page":"Another page","title":"BookBayes.are_markov_equivalent","text":"function are_markov_equivalent(G::DAG, H::DAG)\n\nDetermine whether the directed acyclic graphs G and H are Markov equivalent.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.assignments-Tuple{AbstractArray{Variable,1}}","page":"Another page","title":"BookBayes.assignments","text":"function assignments(vars::AbstractVector{Variable})\n\nGet an array of all possible variable=>value assignment tuples for Variables in vars.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.backup-Tuple{BookBayes.MDP,Any,Any}","page":"Another page","title":"BookBayes.backup","text":"function backup(ùí´::MDP, U, s)\n\nCalculate max‚Çê Q(s,a). Complexity: O(|ùíÆ|√ó|ùíú|).\n\nreturn maximum(lookahead(ùí´, U, s, a) for a in ùí´.ùíú)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.bayesian_score-Tuple{Any,Any,Any}","page":"Another page","title":"BookBayes.bayesian_score","text":"function bayesian_score(vars, G, D)\n\nCompute the Bayesian score for a list of variables vars and a graph G given data D.  Uses a uniform prior Œ±·µ¢‚±º‚Çñ = 1 for all i, j, and k.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.bayesian_score_component-Tuple{Any,Any}","page":"Another page","title":"BookBayes.bayesian_score_component","text":"function bayesian_score_component(M, Œ±)\n\nCompute the component of the Bayesian score for a single Variable.\n\nArguments\n\n* M::Matrix{Integer}\n    Count matrix of size q·µ¢ x r·µ¢ of data.\n\n* Œ±::Matrix{Union{Float, Integer}}\n    Matrix (of same size as M) of Dirichlet priors of a single Variable's parameter.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.blanket-Tuple{Any,Any,Any}","page":"Another page","title":"BookBayes.blanket","text":"function blanket(bn::BayesianNetwork, a, i)\n\nCalculate P(X_i  x_-i) from a Bayesian Network bn.\n\nArguments\n\nbn:: BayesianNetwork\na::NamedTuple: Complete assignment of values to every variable in bn.\ni::Integer Index of leave-one-out variable X·µ¢ in network (according to some valid topological sort)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.bonus-Tuple{Any,Any}","page":"Another page","title":"BookBayes.bonus","text":"bonus(Nsa, Ns)\n\nMonte Carlo exploration bonus term helper function.\n\nComplexity: ùí™(1)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.branch_and_bound-NTuple{5,Any}","page":"Another page","title":"BookBayes.branch_and_bound","text":"function branch_and_bound(ùí´, s, d, Ulo, Qhi)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.condition-Tuple{Factor,Any,Any}","page":"Another page","title":"BookBayes.condition","text":"function condition(œÜ::Factor, name, value)\n\nMethod for factor conditioning.  Take a factor œï and return a new factor whose table entries are consistent with the variable named name having value value.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.condition-Tuple{Factor,Any}","page":"Another page","title":"BookBayes.condition","text":"function condition(œÜ::Factor, evidence)\n\nMethod for factor conditioning.  Take a factor œï and apply evidence in the form of a named tuple.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.evolution_strategy_weights-Tuple{Any}","page":"Another page","title":"BookBayes.evolution_strategy_weights","text":"function evolution_strategy_weights(m)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.expand-Tuple{LabeledHeuristicSearch,Any,Any,Any}","page":"Another page","title":"BookBayes.expand","text":"function expand(œÄ::LabeledHeuristicSearch, U, solved, s)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.explore-Tuple{MonteCarloTreeSearch,Any}","page":"Another page","title":"BookBayes.explore","text":"function explore(œÄ::MonteCarloTreeSearch, s)\n\nUse monte carlo exploration heuristic to find next action to simulate.  Balances need to explore state-action space with Complexity: ùí™(|ùíú|)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.fit!-Tuple{LinearRegressionValueFunction,Any,Any}","page":"Another page","title":"BookBayes.fit!","text":"function fit!(UŒ∏::LinearRegressionValueFunction, S, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.fit!-Tuple{LocallyWeightedValueFunction,Any,Any}","page":"Another page","title":"BookBayes.fit!","text":"function fit!(UŒ∏::LocallyWeightedValueFunction, S, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.fit!-Tuple{MultilinearValueFunction,Any,Any}","page":"Another page","title":"BookBayes.fit!","text":"function fit!(UŒ∏::MultilinearValueFunction, S, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.fit!-Tuple{NearestNeighborValueFunction,Any,Any}","page":"Another page","title":"BookBayes.fit!","text":"function fit!(UŒ∏::NearestNeighborValueFunction, S, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.fit!-Tuple{SimplexValueFunction,Any,Any}","page":"Another page","title":"BookBayes.fit!","text":"function fit!(UŒ∏::SimplexValueFunction, S, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.fit-Tuple{K2Search,Any,Any}","page":"Another page","title":"BookBayes.fit","text":"function fit(method::K2Search, vars, D)\n\nFind a semi-optimal graph structure over the Variables vars using the K2 Search algorithm given the dataset D.\n\nArguments\n\n* method::K2Search\n    Parameters to contol fit operation\n* vars::Vector{Variables}\n* D::Matrix{Integer}\n    Data array of size n x m, where n == length(vars) (ie number of Variables) and m == number of data points.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.fit-Tuple{LocalDirectedGraphSearch,Any,Any}","page":"Another page","title":"BookBayes.fit","text":"function fit(method::LocalDirectedGraphSearch, vars, D)\n\nFit a graph structure to data set D of samples of Variables vars, following Local Directed Graph Search algorithm.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.forward_search-NTuple{4,Any}","page":"Another page","title":"BookBayes.forward_search","text":"function forward_search(ùí´, s, d, U)\n\nDetermine optimal action (and its value) to take from state s by expanding all possible transitions up to a depth d using depth-first search. U(s) used to evaluate the terminal (depth 0) value function.\n\nComplexity: ùí™( (|ùíú|√ó|ùíÆ|)·µà )\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.gaussian_kernel-Tuple{Any}","page":"Another page","title":"BookBayes.gaussian_kernel","text":"gaussian_kernel(b)\n\nGet a scalar probability density function of a zero-mean, b standard deviation gaussian.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.gibbs_sample-NTuple{5,Any}","page":"Another page","title":"BookBayes.gibbs_sample","text":"function gibbs_sample(a, bn, evidence, ordering, m)\n\nSample BayesianNetwork bn using Gibbs Sampling.  Start from NamedTuple assignment a, given evidence, with ordering giving valid topological sort to follow, and take m samples.\n\nReturns\n\nReturns a new NamedTuple assignment approximately randomly sampled from bn given evidence.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.greedy-Tuple{BookBayes.MDP,Any,Any}","page":"Another page","title":"BookBayes.greedy","text":"function greedy(ùí´::MDP, U, s)\n\nFind the greedy action and its expected utility starting from state s and using estimated optimal (greedy) state value function U.  Calculates estimate as maximum over action space of 1-step lookahead:\n\nu, a = _findmax(a->lookahead(ùí´, U, s, a), ùí´.ùíú)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.in_scope-Tuple{Any,Any}","page":"Another page","title":"BookBayes.in_scope","text":"function in_scope(name, œï)\n\npredicate function: true if any Variable v in œï has v.name == name (ie if name is a variable in œï)\n\nArguments\n\nname::Symbol: Name of variable to test for presense of in Factor œï.\nœï::Factor: Factor to test if variable named <name> is present in.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.infer-Tuple{DirectSampling,Any,Any,Any}","page":"Another page","title":"BookBayes.infer","text":"function infer(M::DirectSampling, bn, query, evidence)\n\nGet a joint distribution over query variables, given evidence.  Uses the direct sampling inference method to draw m samples from network consistent with evidence.\n\nReturns\n\nReturns estimated joint distribution over query variables conditioned on evidence variable assignment.\n\nArguments\n\nM::DirectSampling Singleton value to dispatch this version of infer\nbn BayesianNetwork specifying original distribution\nquery Tuple of Symbols of Variable names to get joint distribution over.\nevidence Dictionary of Variable Symbol name => Variable value pairs specifying known values.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.infer-Tuple{Distributions.MvNormal,Any,Any,Any}","page":"Another page","title":"BookBayes.infer","text":"function infer(D::MvNormal, query, evidencevars, evidence)\n\nGet the conditional normal distribution over the query variables, given the evidence variables\n\nleft\nbeginarrayc\n   bf a \n   bf b\nendarray\nright sim mathcalN left( left\nbeginarrayc\n  bf mu_a \n  bf mu_b\nendarray\nright  left\nbeginarraycc\n  bf A  bf C \n  bf C^T  bf B\nendarray\nright right)\n\nThe conditional distribution is:\n\np(textbfa  textbfb) = mathcalN( bf a   mu_ab Sigma_ab)\n\nboxedbf mu_ab = mu_a + CB^-1(b - mu_b)\n\nboxedSigma_ab = A - CB^-1C^T\n\nExamples\n\nConsider:\n\nleft\nbeginarrayc\n   x_1 \n   x_2\nendarray\nright sim mathcalN left( left\nbeginarrayc\n  0 \n  1\nendarray\nright  left\nbeginarraycc\n  3  1 \n  1  2\nendarray\nright right)\n\nThen the conditional distribution for x‚ÇÅ given x‚ÇÇ = 2 is:\n\nmu_x_1x_2=2 = 0 + 1 cdot 2^-1 cdot (2 - 1) = 05\n\nSigma_x_1x_2=2 = 3 - 1 cdot 2^-1cdot 1 = 25\n\njulia>  d = MvNormal([0.0,1.0], [3.0 1.0; 1.0 2.0])\nd = FullNormal(\n\tdim: 2\n\tŒº: [0.0, 1.0]\n\tŒ£: [3.0 1.0; 1.0 2.0]\n\t)\n\n# get conditional dist for x‚ÇÅ given x‚ÇÇ = 2.0\njulia> infer(d, [1], [2], [2.0])\nFullNormal(\ndim: 1\nŒº: [0.5]\nŒ£: [2.5]\n)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.infer-Tuple{ExactInference,BayesianNetwork,Tuple,NamedTuple}","page":"Another page","title":"BookBayes.infer","text":"function infer(M::ExactInference, bn, query, evidence)\n\nGet a joint distribution over query variables, given evidence.  Uses direct inference.\n\nArguments\n\nM::ExactInference\n\nSingleton value to use this version of infer\n\nbn::BayesianNetwork\n\nBayesianNetwork specifying original distribution\n\nquery::Tuple\n\nTuple of Symbols of Variable names to get joint distribution over.\n\nevidence::NamedTuple\n\nDictionary of Variable Symbol name => Variable value pairs specifying known values.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.infer-Tuple{GibbsSampling,Any,Any,Any}","page":"Another page","title":"BookBayes.infer","text":"function infer(M::GibbsSampling, bn, query, evidence)\n\nEstimate the conditional distribution over the query variables given the evidence values, using Gibbs Sampling\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.infer-Tuple{LikelihoodWeightedSampling,Any,Any,Any}","page":"Another page","title":"BookBayes.infer","text":"function infer(M::LikelihoodWeightedSampling, bn, query, evidence)\n\nGet a joint distribution over query variables, given evidence.  Uses the Likelihood Weighted Sampling inference method to draw m samples from network consistent with evidence.\n\nReturns\n\nReturns estimated joint distribution over query variables conditioned on evidence variable assignment.\n\nArguments\n\nM::LikelihoodWeightedSampling Singleton value to dispatch this version of infer\nbn BayesianNetwork specifying original distribution\nquery Tuple of Symbols of Variable names to get joint distribution over.\nevidence Dictionary of Variable Symbol name => Variable value pairs specifying known values.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.infer-Tuple{VariableElimination,Any,Any,Any}","page":"Another page","title":"BookBayes.infer","text":"function infer(M::VariableElimination, bn, query, evidence)\n\nGet a joint distribution over query variables, given evidence.  Uses the sum-product variable elimination algorithm.\n\nFields:\n\nM::VariableElimination\n\nSingleton value to dispatch this version of infer\n\nbn::BayesianNetwork\n\nBayesianNetwork specifying original distribution\n\nquery::Tuple{Symbol}\n\nTuple of Symbols of Variable names to get joint distribution over.\n\nevidence::NamedTuple\n\nDictionary of Variable Symbol name => Variable value pairs specifying known values.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.iterative_policy_evaluation-Tuple{BookBayes.MDP,Any,Any}","page":"Another page","title":"BookBayes.iterative_policy_evaluation","text":"function iterative_policy_evaluation(ùí´::MDP, œÄ, k_max)\n\nApproximate policy evaluation for policy œÄ, using k_max iterations of 1-step lookahead, starting from U(s) = 0.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.kernel_density_estimate-Tuple{Any,Any}","page":"Another page","title":"BookBayes.kernel_density_estimate","text":"function kernel_density_estimate(œÜ, O)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.label!-Tuple{LabeledHeuristicSearch,Any,Any,Any}","page":"Another page","title":"BookBayes.label!","text":"function label!(œÄ::LabeledHeuristicSearch, U, solved, s)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.lookahead-Tuple{BookBayes.MDP,Any,Any,Any}","page":"Another page","title":"BookBayes.lookahead","text":"function lookahead(ùí´::MDP, U, s, a)\n\nCalculate state-action value function Q(s,a) from U and valid state transition distribution T:\n\nReturns     Q(s,a) = R(s,a) + Œ≥sum(T(s,a,s‚Ä≤)U(s‚Ä≤) for s‚Ä≤ in ùíÆ)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.lookahead-Tuple{BookBayes.MDP,Array{T,1} where T,Any,Any}","page":"Another page","title":"BookBayes.lookahead","text":"function lookahead(ùí´::MDP, U::Vector, s, a)\n\nCalculate state-action value function Q(s,a) from U and valid state transition distribution T:\n\nreturn R(s,a) + Œ≥*sum(T(s,a,s‚Ä≤)*U[i] for (i,s‚Ä≤) in enumerate(ùíÆ))\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.marginalize-Tuple{Factor,Any}","page":"Another page","title":"BookBayes.marginalize","text":"function marginalize(œï::Factor, name)\n\nIntegrate œï::Factor by Variable with name name to get new Factor with marginal distribution over remaining Variables.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.normalize!-Tuple{Factor}","page":"Another page","title":"BookBayes.normalize!","text":"function normalize!(œÜ::Factor)\n\nUpdate œÜ::Factor so all values sum to 1.0 while maintaining relative value (so values represent probabilities).\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.optimize-Tuple{Any,Any,Any}","page":"Another page","title":"BookBayes.optimize","text":"function optimize(M, œÄ, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.optimize-Tuple{GeneticPolicySearch,Any,Any}","page":"Another page","title":"BookBayes.optimize","text":"function optimize(M::GeneticPolicySearch, œÄ, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.optimize-Tuple{HookeJeevesPolicySearch,Any,Any}","page":"Another page","title":"BookBayes.optimize","text":"function optimize(M::HookeJeevesPolicySearch, œÄ, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.optimize_dist-Tuple{CrossEntropyPolicySearch,Any,Any}","page":"Another page","title":"BookBayes.optimize_dist","text":"function optimize_dist(M::CrossEntropyPolicySearch, œÄ, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.optimize_dist-Tuple{EvolutionStrategies,Any,Any}","page":"Another page","title":"BookBayes.optimize_dist","text":"function optimize_dist(M::EvolutionStrategies, œÄ, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.optimize_dist-Tuple{IsotropicEvolutionStrategies,Any,Any}","page":"Another page","title":"BookBayes.optimize_dist","text":"function optimize_dist(M::IsotropicEvolutionStrategies, œÄ, U)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.policy_evaluation-Tuple{BookBayes.MDP,Any}","page":"Another page","title":"BookBayes.policy_evaluation","text":"function policy_evaluation(ùí´::MDP, œÄ)\n\nExact policy evaluation using matrix-based Moore-Penrose pseudoinverse equation. Requires O(|ùíÆ|¬≥) time.\n\nReturns: [ U(s) ‚àÄ s ‚àà {ùíÆ} ]\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.prior-Tuple{Any,Any}","page":"Another page","title":"BookBayes.prior","text":"function prior(vars, G)\n\nGenerate a matrix of Dirichlet priors {Œ±·µ¢‚±º‚Çñ = 1 ‚àÄ i, j, k} corresponding to a uniform prior distribution over the parameters of a bayesian network.\n\nArguments\n\n* vars::Vector{Variables}\n    The Variables of the discrete BayesianNetwork\n* G::DAG\n    The bayesian directed acyclic graph structure\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.probability-Tuple{BayesianNetwork,Any}","page":"Another page","title":"BookBayes.probability","text":"function probability(bn::BayesianNetwork, assignment)\n\nCalculate the probability of a given variable assignment given the bayesian network bn.\n\nArguments\n\nbn: The BayesianNetwork describing the joint distribution\nassignment: a NamedTuple of :Symbol=>Integer pairs giving the           categorical index value of each variable.\n\nExamples\n\njulia> X = Variable(:x, 2);\n\njulia> Y = Variable(:y, 2);\n\njulia> Z = Variable(:z, 2);\n\njulia> œïx = Factor([X, Y, Z], FactorTable(\n           (x=1, y=1, z=1) => 0.08,\n           (x=1, y=1, z=2) => 0.31,\n           (x=1, y=2, z=1) => 0.09,\n           (x=1, y=2, z=2) => 0.37,\n           (x=2, y=1, z=1) => 0.01,\n           (x=2, y=1, z=2) => 0.05,\n           (x=2, y=2, z=1) => 0.02,\n           (x=2, y=2, z=2) => 0.07,\n       ));\n\njulia> œïy = Factor([Y], FactorTable(\n           (y=1,) => 0.20,\n           (y=2,) => 0.80,\n       ));\n\njulia> œïz = Factor([Z], FactorTable(\n           (z=1,) => 0.40,\n           (z=2,) => 0.60,\n       ));\n\njulia> g = SimpleDiGraph(3);\n\njulia> add_edge!(g,1,3);\n\njulia> add_edge!(g,2,3);\n\njulia> bn = BayesianNetwork([Y, Z, X], [œïy, œïz, œï], g);\n\njulia> assignment = (x=1, y=2, z=1);\n\njulia> probability(bn, assignment)\n0.028800000000000006\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.rand_graph_neighbor-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph}","page":"Another page","title":"BookBayes.rand_graph_neighbor","text":"function rand_graph_neighbor(G::DAG)\n\nGenerate a new acyclic graph that is a random neighbor of G.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.randstep-Tuple{BookBayes.MDP,Any,Any}","page":"Another page","title":"BookBayes.randstep","text":"randstep(ùí´::MDP, s, a) = ùí´.TR(s, a)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.rollout-NTuple{4,Any}","page":"Another page","title":"BookBayes.rollout","text":"function rollout(ùí´, s, œÄ, d)\n\nComplexity: ùí™(d)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.simulate!","page":"Another page","title":"BookBayes.simulate!","text":"function simulate!(œÄ::MonteCarloTreeSearch, s, d=œÄ.d)\n\nExecute exploration-bonus policy for 1 random trajectory, updating system  counters, and return sample trajectory's value.\n\nComplexity: ùí™(|ùíú| √ó d)\n\n\n\n\n\n","category":"function"},{"location":"anotherPage/#BookBayes.simulate!-Tuple{HeuristicSearch,Any,Any}","page":"Another page","title":"BookBayes.simulate!","text":"function simulate!(œÄ::HeuristicSearch, U, s)\n\nSimulate depth-d trajectory following greedy policy and updating U along the way.\n\nComplexity: ùí™(d √ó |ùíú|√ó|ùíÆ|)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.simulate!-Tuple{LabeledHeuristicSearch,Any,Any,Any}","page":"Another page","title":"BookBayes.simulate!","text":"function simulate!(œÄ::LabeledHeuristicSearch, U, solved, s)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{ApproximateValueIteration,BookBayes.MDP}","page":"Another page","title":"BookBayes.solve","text":"function solve(M::ApproximateValueIteration, ùí´::MDP)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{BookBayes.MDP}","page":"Another page","title":"BookBayes.solve","text":"solve(ùí´::MDP) = solve(LinearProgramFormulation(), ùí´)\n\nDefault MDP solver is the LinearProgramFormulation solver.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{GaussSeidelValueIteration,BookBayes.MDP}","page":"Another page","title":"BookBayes.solve","text":"function solve(M::GaussSeidelValueIteration, ùí´::MDP)\n\nSame as Value Iteration but update U one state at a time.  Convergence speed depends on ordering of states in ùíÆ.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{LinearProgramFormulation,BookBayes.MDP}","page":"Another page","title":"BookBayes.solve","text":"function solve(M::LinearProgramFormulation, ùí´::MDP)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{LinearQuadraticProblem}","page":"Another page","title":"BookBayes.solve","text":"function solve(ùí´::LinearQuadraticProblem)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{PolicyIteration,BookBayes.MDP}","page":"Another page","title":"BookBayes.solve","text":"function solve(M::PolicyIteration, ùí´::MDP)\n\nIteratively improves an initial policy œÄ to obtain an optimal policy for an MDP ùí´ with discrete state and action spaces.  Returns improved policy.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{SimpleProblem,Any,Any}","page":"Another page","title":"BookBayes.solve","text":"function solve(ùí´::SimpleProblem, evidence, M)\n\nGiven a decision network ùí´ and observed variable assignment evidence, determine the optimal action variable assignment and associated expected utility, using inference method M.\n\nArguments\n\nùí´::SimpleProblem\n    Decision network\nevidence\n    Vector of NamedTuples mapping Symbol name of Variable to assignment of observed values of condition vars.\nM\n    Method to use for inference over utility vars given evidence\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.solve-Tuple{ValueIteration,BookBayes.MDP}","page":"Another page","title":"BookBayes.solve","text":"function solve(M::ValueIteration, ùí´::MDP)\n\nIteratively improves a value function U to obtain an optimal policy for an MDP ùí´ with discrete state and action spaces.  Terminates after k_max iterations.\n\nOrder O(k_max √ó |ùíÆ| √ó |ùíú| √ó |ùíÆ|)\n\nReturns\n\nOptimal policy œÄ\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.sparse_sampling-NTuple{5,Any}","page":"Another page","title":"BookBayes.sparse_sampling","text":"function sparse_sampling(ùí´, s, d, m, U)\n\nComplexity: ùí™( (|ùíú| √ó m)·µà )\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.statistics-Tuple{Any,Any,Any}","page":"Another page","title":"BookBayes.statistics","text":"function statistics(vars, G, D::Matrix{Int})\n\nExtract the statistics (ie counts) from a discrete dataset D assuming a Bayesian network with variables vars and structure G.  The dataset is an n x m matrix, where n is the number of variables, and m is the number of data points.\n\nReturns\n\nReturns an array M of length n.  The ith component consists of a q·µ¢ x r·µ¢ matrix of counts.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.sub2ind-Tuple{Any,Any}","page":"Another page","title":"BookBayes.sub2ind","text":"function sub2ind(siz, x)\n\nConvert a length n cartesian coordinate for indexing an n dimensional array into its linear (scalar) equivalent.\n\nArguments\n\nsiz::NTuple{Int}\nResult of calling size(A) on the matrix of interest A.\nx::NTuple{Int}\nlength(siz)-length cartesian index to convert from\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.tensorform-Tuple{BookBayes.MDP}","page":"Another page","title":"BookBayes.tensorform","text":"function tensorform(ùí´::MDP)\n\nConvert an MDP into its tensor form, where the states and actions consist of integer indicies, the reward function is a matrix, and the transition function is a three-dimensional tensor.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.update_gibbs_sample-NTuple{4,Any}","page":"Another page","title":"BookBayes.update_gibbs_sample","text":"function update_gibbs_sample(a, bn, evidence, ordering)\n\nSingle Gibbs Sampling sample loop.  Starting from complete assignment a of values to all variable in bn, sample each distribution P(X_i  x_-i) one at a time, replacing its entry in a with sampled value after each iteration.\n\nArguments\n\na::NamedTuple\nbn::BayesianNetwork\nevidence::NamedTuple\nordering::Vector{Integer}: Vector of indices of each variable in bayesian network according to valid topological sort.\n\nReturns\n\nReturns NamedTuple assignment updated with new sampled values\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.value_of_information-NTuple{4,Any}","page":"Another page","title":"BookBayes.value_of_information","text":"function value_of_information(ùí´, query, evidence, M)\n\nDetermine the Value of Information (VOI) of query variables, given evidence assignment of (specific) values to already observed variables, using inference method M.\n\n\n\n\n\n","category":"method"},{"location":"anotherPage/#BookBayes.variablenames-Tuple{Factor}","page":"Another page","title":"BookBayes.variablenames","text":"function variablenames(œÜ::Factor)\n\nGet a vector of variable names (Symbols) for the Variables in a Factor\n\n\n\n\n\n","category":"method"},{"location":"#BookBayes.jl","page":"Index","title":"BookBayes.jl","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Documentation for BookBayes.jl","category":"page"}]
}
